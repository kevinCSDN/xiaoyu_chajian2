name: BuildOpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      cache:
        description: 'Cache wrt build'
        required: false
        default: 'true'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  #REPO_URL: https://github.com/tangtao-xp1/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    # ================== 不可省略的代码部分 ==================
    - name: 创建编译空间挂载点
      run: |
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 最大化编译空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1024
        build-mount-path: /workdir
        overprovision-lvm: 'true'
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout
      uses: actions/checkout@v3

    - name: 检查服务器配置
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo "云编译建议取消勾选Node.js及其相关插件！"
        echo "已知CPU型号（降序）：8370C,8272CL,8171M,E5系列"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "--------------------------硬盘信息--------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://github.com/Jason6111/OpenWrt_Personal/raw/main/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo timedatectl set-timezone "$TZ"
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: cache
      if: github.event.inputs.cache == 'true' && github.event.inputs.cache != 'false'
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a
      
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a -f

    - name: Run make defconfig to clean dependencies
      run: cd openwrt && make defconfig

    # ================== 新增核心逻辑 ==================
    - name: 编译固件（允许失败）
      id: build_firmware
      continue-on-error: true  # 关键设置：允许失败
      run: |
        cd openwrt
        # 强制生成设备名称信息（即使编译失败）
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
        # 尝试编译固件
        make -j$(nproc) && echo "::set-output name=status::success" || echo "::set-output name=status::failure"

    - name: 编译插件（允许部分失败）
      id: build_packages
      continue-on-error: true  # 关键设置：允许失败
      run: |
        cd openwrt
        LUCI_APPS=$(grep '^CONFIG_PACKAGE_luci-app-' .config | cut -d'=' -f1 | sed 's/CONFIG_PACKAGE_//g')
        if [ -z "$LUCI_APPS" ]; then
          echo "No LuCI apps selected!"
          exit 0
        fi
        
        # 逐个编译插件（避免并行失败）
        for app in $LUCI_APPS; do
          echo "Compiling $app..."
          make package/$app/compile -j1 V=s || echo "⚠️ Failed: $app"
        done

    # ================== 智能上传模块 ==================
    - name: 检查固件结果
      id: check_firmware
      run: |
        if [ -d "openwrt/bin/targets" ]; then
          echo "::set-output name=has_firmware::true"
        else
          echo "::set-output name=has_firmware::false"
        fi

    - name: 检查插件结果
      id: check_packages
      run: |
        if ls openwrt/bin/packages/*/base/luci-app-*.ipk >/dev/null 2>&1; then
          echo "::set-output name=has_packages::true"
        else
          echo "::set-output name=has_packages::false"
        fi

    - name: 生成Release标签
      run: |
        echo "RELEASE_TAG=Build-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

    - name: 上传固件
      if: steps.check_firmware.outputs.has_firmware == 'true'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/targets/*/*

    - name: 上传插件
      if: steps.check_packages.outputs.has_packages == 'true'
      uses: actions/upload-artifact@main
      with:
        name: luci-apps
        path: openwrt/bin/packages/*/base/luci-app-*.ipk

    - name: 发布到GitHub Release
      uses: softprops/action-gh-release@v1
      if: |
        steps.check_firmware.outputs.has_firmware == 'true' ||
        steps.check_packages.outputs.has_packages == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        body: |
          Build Status:
          - Firmware: ${{ steps.check_firmware.outputs.has_firmware }}
          - Packages: ${{ steps.check_packages.outputs.has_packages }}
        files: |
          openwrt/bin/targets/*/*
          openwrt/bin/packages/*/base/luci-app-*.ipk
